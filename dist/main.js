/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts.js":
/*!********************!*\
  !*** ./scripts.js ***!
  \********************/
/***/ (() => {

eval("// var moment = require('moment');\nconst h1Math = document.createElement('h1');\nh1Math.textContent = '0';\nconst body = document.querySelector('body');\nconst increaseButton = document.createElement('button');\nincreaseButton.textContent = 'Increase!';\nconst decreaseButton = document.createElement('button');\ndecreaseButton.textContent = 'Decrease!';\nbody.appendChild(h1Math);\nbody.appendChild(increaseButton);\nbody.appendChild(decreaseButton);\n\nconst alterCounter = {\n  counter: 0,\n  increaseOrDecrease: function () {\n    if (this.textContent === 'Increase!') {\n      alterCounter.counter++;\n      h1Math.textContent = '';\n      h1Math.textContent = alterCounter.counter;\n    } else if (this.textContent === 'Decrease!') {\n      alterCounter.counter--;\n      h1Math.textContent = '';\n      h1Math.textContent = alterCounter.counter;\n    }\n  },\n};\n\nincreaseButton.addEventListener(\n  'click',\n  alterCounter.increaseOrDecrease.bind(increaseButton),\n  false\n);\ndecreaseButton.addEventListener(\n  'click',\n  alterCounter.increaseOrDecrease.bind(decreaseButton),\n  false\n);\n\nconst h1 = document.createElement('h1');\nh1.textContent = '0';\nconst nameButton = document.createElement('button');\nconst neverButton = document.createElement('button');\nnameButton.textContent = 'SAY MY NAME!';\nneverButton.textContent = 'NO!';\n\nconst nameSayer = {\n  name: 'Heisenberg',\n  no: 'NO!',\n  sayIt: function () {\n    if (this.textContent === 'SAY MY NAME!') {\n      h1.textContent = '';\n      h1.textContent = nameSayer.name;\n      console.log(this.textContent);\n    }\n    if (this.textContent === 'NO!') {\n      h1.textContent = '';\n      h1.textContent = nameSayer.no;\n      console.log(this.textContent);\n    }\n  },\n};\n\nbody.appendChild(h1);\nbody.appendChild(nameButton);\nbody.appendChild(neverButton);\nnameButton.addEventListener('click', nameSayer.sayIt.bind(nameButton), false);\nneverButton.addEventListener('click', nameSayer.sayIt.bind(neverButton), false);\n\nconst Character = (name, level, strength, healingAbility) => {\n  let dead = false;\n  let health = level / 4;\n  let attackStrength = strength;\n  let healingStrength = healingAbility;\n  const getName = function () {\n    return name;\n  };\n  const getLevel = function () {\n    return level;\n  };\n  const getStrength = function () {\n    return strength;\n  };\n  const gethealingAbility = function () {\n    return healingAbility;\n  };\n  const getHealth = function () {\n    return health;\n  };\n\n  const takeDamage = function (amount) {\n    health -= amount;\n    if (health <= 0) {\n      dead = true;\n    }\n  };\n\n  const receiveHealing = function (amount) {\n    let fullHealth = level / 4;\n    if(health <= fullHealth) {\n      if(fullHealth - health >= amount) {\n        health += amount\n      } else {\n        health = fullHealth;\n      }\n    }\n  };\n  const attack = function (enemy) {\n    if(dead === false) {\n      if(enemy.getHealth() > 0 && enemy.getHealth() - attackStrength >= 0) {\n        enemy.takeDamage(attackStrength);\n      } else {\n        while(enemy.getHealth() > 0) {\n          enemy.takeDamage(1)\n        }\n      }\n  }\n    console.log(`${name} has struck! for ${attackStrength} damage!`);\n  };\n\n  const heal = function (ally) {\n    if (ally.aliveOrDead() === 'Alive') {\n      ally.receiveHealing(healingStrength);\n      console.log(\n        `${name} has healed ${ally.getName()} for ${healingStrength} health!`\n      );\n    }\n  };\n  const aliveOrDead = function () {\n    if (dead === true) {\n      return 'DEAD';\n    }\n    return 'Alive';\n  };\n\n  return {\n    getName,\n    getLevel,\n    getStrength,\n    gethealingAbility,\n    getHealth,\n    aliveOrDead,\n    takeDamage,\n    receiveHealing,\n    attack,\n    heal,\n  };\n};\n\nlet christina = Character('Christina', 100, 5, 20);\nlet blain = Character('Blain', 120, 10, 10);\n\nconst christinaAttack = function () {\n  christina.attack(blain);\n  h1Math.textContent = '';\n  h1Math.textContent = blain.getHealth();\n} \n\nconst blainAttack = function () {\n  blain.attack(christina);\n  h1.textContent = '';\n  h1.textContent = christina.getHealth();\n};\n\nconst christinaHeal = function () {\n  christina.heal(christina);\n  h1.textContent = '';\n  h1.textContent = christina.getHealth();\n} \n\nconst blainHeal = function () {\n  blain.heal(blain);\n  h1Math.textContent = '';\n  h1Math.textContent = blain.getHealth();\n};\n\n\nlet blainAttackButton = document.createElement('button');\nblainAttackButton.textContent = 'Blain Attack'\nlet christinaAttackButton = document.createElement('button');\nchristinaAttackButton.textContent = 'Christina Attack'\nbody.appendChild(blainAttackButton);\nbody.appendChild(christinaAttackButton);\n\nlet blainHealButton = document.createElement('button');\nblainHealButton.textContent = 'Blain Heal'\nlet christinaHealButton = document.createElement('button');\nchristinaHealButton.textContent = 'Christina Heal'\nbody.appendChild(blainHealButton);\nbody.appendChild(christinaHealButton);\n\nblainAttackButton.addEventListener('click', blainAttack, false);\nchristinaAttackButton.addEventListener('click', christinaAttack, false);\nblainHealButton.addEventListener('click', blainHeal, false);\nchristinaHealButton.addEventListener('click', christinaHeal, false);\n\n\nclass Triangle {\n\n  constructor(a, b, c) {\n    this.a = a\n    this.b = b\n    this.c = c\n  }\n\n  get checkIfIsRightTriangle() {\n    return this.isRightTriangle = (this.a**2 + this.b**2) === this.c**2;\n  }\n\n  get checkIfIsEqualLateralTriangle() {\n    return this.isEqualLateralTriangle = this.a === this.b && this.b === this.c;\n  }\n\n  setA(a) {\n    this.a = a\n    this.checkIfIsEqualLateralTriangle\n    this.checkIfIsRightTriangle\n  }\n\n  setB(b) {\n    this.b = b\n    this.checkIfIsEqualLateralTriangle\n    this.checkIfIsRightTriangle\n  }\n\n  setC(c) {\n    this.c = c;\n    this.checkIfIsEqualLateralTriangle\n    this.checkIfIsRightTriangle\n  }\n\n}\n\n\nclass EqualLateralTriangle extends Triangle {\n  constructor(sidesLength) {\n    super(sidesLength, sidesLength, sidesLength);\n  }\n}\n\nlet myTriangle = new Triangle(2, 2, 64);\nlet equalLateral = new EqualLateralTriangle(10);\nconsole.log(moment().startOf('day').fromNow());\n\n\n\n\n\n//# sourceURL=webpack://private-public-practice/./scripts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts.js"]();
/******/ 	
/******/ })()
;